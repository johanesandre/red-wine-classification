# -*- coding: utf-8 -*-
"""SVM -Submission1 MLT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1de6iOreSDmWQNRthG5hnFChn-Jn_GIBn

**Import library yang digunakan**
"""

# Commented out IPython magic to ensure Python compatibility.
#import library yang akan digunakan
import pandas as pd
import seaborn as sns
import os
# %matplotlib inline
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer
from sklearn import svm
from sklearn.metrics import classification_report
import numpy as np
import tensorflow as tf

from tensorflow import feature_column
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

#ambil API KAGGLE
os.environ['KAGGLE_USERNAME'] = "johanesandre"
os.environ['KAGGLE_KEY'] = "a54c201c45be4ec682e929488efb0ba3"

"""**Download Dataset dari Kaggle**"""

#Download Dataset Kaggle
!kaggle datasets download -d uciml/red-wine-quality-cortez-et-al-2009

"""**Persiapan Import Data ke Lembar Kerja**"""

# melakukan ekstraksi pada file zip
import zipfile,os
local_zip = '/content/red-wine-quality-cortez-et-al-2009.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

#membaca Data CSV dan melihat 5 data teratas
df = pd.read_csv('/tmp/winequality-red.csv')
df.head()

# Mengecek total baris dan kolom dari dataset
print(df.shape)

# Memuat informasi dataframe
df.info()

"""**Untuk melihat nilai statistik yang dinilai oleh masing2 fitur**


"""

# Memuat deskripsi setiap kolom dataframe
df.describe()

#Ploting Numerical Feature
df.hist(bins=50, figsize=(20,15),color='Red')
plt.show()

"""Dari plot data, bisa dilihat bahwa wine yang memilki label yg cukup untuk mendeteksi anggur tersebut memiliki kualitas apa"""

#mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind = 'kde')

#Visualisasi Plot Correlation Matrix
plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Jika dilihat dari Correlation Matrix, Quality paling dipengaruhi oleh variable alcohol

Berikan nilai pada fitur quality
Jika Kualitas di atas angka 5, Wine berkualitas bagus
Di bawah itu, =  bad
"""

#Memberikan Nilai label, jika fitur quality >5 adalah anggur kualitas bagus, sisanya buruk. TRUE berarti di atas 5, false dibawah 5
y=df['quality']>5
y

"""Krn hasil yg kita harapkan di variable Quality, hapus dari data frame kita"""

#membuang fitur quality dari dataframe
X=df.iloc[:,:-1]

X

"""Mulai buat model ML. Bagi dulu antara data test menjadi 20%, data train 80%"""

#Membuat model ML. Pembagian datatest & data train
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42,test_size=0.2)
X_train.shape

# Mengecek jumlah baris pada data test
X_test.shape

"""Standarisasi dengan standarScaler ( mengurangkan mean (nilai rata-rata) kemudian membaginya dengan standar deviasi untuk menggeser distribusi.)"""

#Standarisasi dengan standarscaler
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler().fit(X_train)
#scaler = preprocessing.StandardScaler().fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)
scaler_X_train=scaler.fit_transform(X_train)
#scaler_X_train

# Melihat hasil standarisasi data
scaler_X_test=scaler.transform(X_test)
scaler_X_test

# Mengecek jumlah baris pada data train
X_train.shape

"""**Membuat Fungsi untuk mengembalikan score**"""

#Membuat Fungsi untuk mengembalikan score
def scores_results(y_train, y_test, y_pred_train, y_pred_test):
    #this function will provide us with accuracy and mse scores for training and test sets
    y_pred_train_round = np.round(y_pred_train)
    y_pred_test_round = np.round(y_pred_test)
    accuracy = [accuracy_score(y_train, y_pred_train_round), accuracy_score(y_test, y_pred_test_round)]
    mse_with_rounding = [mean_squared_error(y_train, y_pred_train_round), mean_squared_error(y_test, y_pred_test_round)]
    results = pd.DataFrame(list(zip(accuracy, mse_with_rounding)), columns = ['accuracy score', 'mse (after rounding)'], index = ['train', 'test'])
    return results

"""Buat Model SVM"""

#Uji Coba menjalankan model yang dibuat

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score


def svm_reg(X_train_scaled, X_test_scaled, y_train, y_test):
    from sklearn.svm import SVR
    parameters = [{'C': [0.1, 1, 10],
                   'epsilon': [0.01, 0.1],
                    'gamma': [0.01, 0.1, 0.3, 0.5, 1]}]
    clf2 = SVR(kernel = 'rbf')
    clf = GridSearchCV(clf2, parameters, cv=10)
    clf.fit(X_train_scaled, y_train)
    y_pred_train = clf.predict(X_train_scaled)
    y_pred_test = clf.predict(X_test_scaled)
    best_parameters = clf.best_params_
    print ('best parameters:', best_parameters)
    return scores_results(y_train, y_test, y_pred_train, y_pred_test)
svm_reg(X_train_scaled, X_test_scaled, y_train, y_test)

#buat model SVM 
from sklearn.svm import SVC
from sklearn.svm import SVR

svc_clf = SVC(C=1.0, kernel='rbf', degree=3, gamma='auto', coef0=0.0, shrinking=True, probability=False, 
              tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', 
              break_ties=False,random_state=None)

svc_clf.fit(scaler_X_train,y_train)

#hasil prediksi dari data test. Berupa TRUE-FALSE
svc_clf_predictions=svc_clf.predict(scaler_X_test)
svc_clf_predictions

"""**Import Library untuk Visualisasi**"""

#plotting accuracy, precision, dan recall
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

a=accuracy_score(y_test,svc_clf_predictions)
p=precision_score(y_test,svc_clf_predictions)
r=recall_score(y_test,svc_clf_predictions)

#print hasil dalam satuan persen
print('Accuracy:',a*100)
print('Precision:',p*100)
print('Recall:',r*100)

con=confusion_matrix(y_test,svc_clf_predictions)
print('Confusion Matrix:\n',con)